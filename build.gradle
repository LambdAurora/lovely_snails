plugins {
	id 'fabric-loom' version '1.4.+'
	id 'dev.yumi.gradle.licenser' version '1.0.+'
	id 'java-library'
	id 'maven-publish'
	id 'com.modrinth.minotaur' version '2.+'
	id 'net.darkhax.curseforgegradle' version '1.1.+'
}

import com.modrinth.minotaur.dependencies.ModDependency
import net.darkhax.curseforgegradle.TaskPublishCurseForge

group = project.maven_group
version = "${project.mod_version}+${project.minecraft_version}"
base.archivesName = project.archives_base_name

// This field defines the Java version your mod target.
def targetJavaVersion = 17

boolean isMCVersionNonRelease() {
	return project.minecraft_version.matches('^\\d\\dw\\d\\d[a-z]$')
			|| project.minecraft_version.matches('\\d+\\.\\d+-(pre|rc)(\\d+)')
}

String getMCVersionString() {
	if (isMCVersionNonRelease()) {
		return project.minecraft_version
	}
	def version = project.minecraft_version.split('\\.')
	return version[0] + '.' + version[1]
}

String getVersionType() {
	if (isMCVersionNonRelease() || version.contains("-alpha.")) {
		return "alpha"
	} else if (version.contains("-beta.")) {
		return "beta"
	} else {
		return "release"
	}
}

String parseReadme() {
	def linkRegex = /!\[([A-z_ ]+)]\((images\/[A-z.\/_]+)\)/

	def readme = (String) file('README.md').text
	readme = readme.replaceAll(linkRegex, '![$1](https://raw.githubusercontent.com/LambdAurora/lovely_snails/1.20/$2)')
	return readme
}

String fetchChangelog() {
	def changelogText = file('CHANGELOG.md').text
	def regexVersion = ((String) project.mod_version).replaceAll('\\.', /\\./).replaceAll('\\+', '\\+')
	def changelogRegex = ~"###? ${regexVersion}\\n\\n(( *- .+\\n)+)"
	def matcher = changelogText =~ changelogRegex

	if (matcher.find()) {
		def changelogContent = matcher.group(1)

		def changelogLines = changelogText.split('\n')
		def linkRefRegex = ~'^\\[([A-z\\d _\\-/+.]+)]: '
		for (int i = changelogLines.length - 1; i > 0; i--) {
			def line = changelogLines[i]
			if ((line =~ linkRefRegex).find())
				changelogContent += '\n' + line
			else break
		}
		return changelogContent
	} else {
		return null;
	}
}

loom {
	// Enable runtime only log4j, forces mods to use SLF4J for logging.
	runtimeOnlyLog4j = true
}

repositories {
	maven {
		name 'Quilt'
		url 'https://maven.quiltmc.org/repository/release'
	}
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "org.quiltmc:quilt-mappings:${minecraft_version}+build.${project.quilt_mappings}:intermediary-v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}") {
		exclude group: 'net.fabricmc'
	}
}

java {
	sourceCompatibility = JavaVersion.toVersion(targetJavaVersion)
	targetCompatibility = JavaVersion.toVersion(targetJavaVersion)

	withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'

	it.options.release.set(targetJavaVersion)
}

processResources {
	inputs.property 'version', project.version

	filesMatching('fabric.mod.json') {
		expand 'version': project.version
	}
}

jar {
	from('LICENSE') {
		rename { "${it}_${project.archivesBaseName}" }
	}
}

license {
	rule file('HEADER')
}

modrinth {
	projectId = project.modrinth_id
	versionName = "Lovely Snails ${project.mod_version} (${getMCVersionString()})"
	versionType = isMCVersionNonRelease() ? "beta" : "release"
	uploadFile = remapJar
	gameVersions = [project.minecraft_version]
	loaders = ["fabric", "quilt"]
	dependencies = [
			new ModDependency("P7dR8mSH", "required")
	]
	syncBodyFrom = parseReadme()

	// Changelog fetching
	def changelogContent = fetchChangelog()

	if (changelogContent) {
		changelog = changelogContent
	} else {
		afterEvaluate {
			tasks.modrinth.setEnabled(false)
		}
	}
}
tasks.modrinth.dependsOn(tasks.modrinthSyncBody)

tasks.register('curseforge', TaskPublishCurseForge) {
	setGroup("publishing")

	if (System.getenv("CURSEFORGE_TOKEN")) {
		apiToken = System.getenv("CURSEFORGE_TOKEN")
	} else {
		setEnabled(false)
		return
	}

	// Changelog fetching
	def changelogContent = fetchChangelog()

	if (changelogContent) {
		changelogContent = "Changelog:\n\n${changelogContent}"
	} else {
		setEnabled(false)
		return
	}

	def mainFile = upload(project.curseforge_id, tasks.remapJar)
	mainFile.releaseType = this.getVersionType()
	mainFile.addGameVersion(project.minecraft_version)
	mainFile.addModLoader("Fabric", "Quilt")
	mainFile.addJavaVersion("Java 17", "Java 18")

	mainFile.displayName = "Lovely Snails ${project.mod_version} (${project.minecraft_version})"
	mainFile.addRequirement("fabric-api")
	mainFile.addOptional("modmenu")

	mainFile.changelogType = "markdown"
	mainFile.changelog = changelogContent
}
